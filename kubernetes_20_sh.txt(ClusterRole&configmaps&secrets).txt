configmaps & secrets
cluster admin---> we have default role


root@ip-172-31-36-152:~# kubectl get clusterrole | grep -i cluster
cluster-admin                                                          2021-09-25T04:45:20Z
system:controller:clusterrole-aggregation-controller                   2021-09-25T04:45:20Z


root@ip-172-31-36-152:~/shanu# openssl genrsa -out shanu.key 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
...................................................+++++
...........+++++
e is 65537 (0x010001)
root@ip-172-31-36-152:~/shanu# ls
CA.crt  CA.key  shanu.key
root@ip-172-31-36-152:~/shanu# openssl req -new -key shanu.key -out shanu.csr -subj "/CN=shanu/O=development"
root@ip-172-31-36-152:~/shanu# ls
CA.crt  CA.key  shanu.csr  shanu.key
root@ip-172-31-36-152:~/shanu# openssl x509 -req -in shanu.csr -CA CA.crt -CAkey CA.key -CAcreateserial -out shanu.crt -days 45
Signature ok
subject=CN = shanu, O = development
Getting CA Private Key

root@ip-172-31-36-152:~# kubectl config set-credentials shanu --client-certificate shanu.crt --client-key shanu.key
User "shanu" set.
root@ip-172-31-36-152:~# kubectl config set-context shanu-context --cluster=kiwidev.xyz
Context "shanu-context" created.
root@ip-172-31-36-152:~# kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://api.kiwidev.xyz
  name: kiwidev.xyz
contexts:
- context:
    cluster: kiwidev.xyz
    user: kiwidev.xyz
  name: kiwidev.xyz
- context:
    cluster: kiwidev.xyz
    user: ""
  name: shanu-context
current-context: kiwidev.xyz
kind: Config
preferences: {}
users:
- name: kiwidev.xyz
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
- name: nag
  user:
    client-certificate: /root/shanu/nag.crt
    client-key: /root/shanu/shanu.key
- name: shanu
  user:
    client-certificate: /root/shanu.crt
    client-key: /root/shanu.key



root@ip-172-31-40-54:~/shanu# kubectl create ns dev
namespace/dev created
root@ip-172-31-40-54:~/shanu# kubectl kubectl config set-context shanu-context --cluster=kiwidev.xyz --namespace=dev --user=shanu
Error: unknown command "kubectl" for "kubectl"
Run 'kubectl --help' for usage.
root@ip-172-31-40-54:~/shanu# kubectl config set-context shanu-context --cluster=kiwidev.xyz --namespace=dev --user=shanu
Context "shanu-context" modified.


root@ip-172-31-40-54:~/shanu# kubectl get clusterrole | grep -i cluster
cluster-admin                                                          2021-09-25T05:48:47Z
system:controller:clusterrole-aggregation-controller                   2021-09-25T05:48:47Z



kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: cluster-admin-shanu
subjects:
- kind: User
  name: shanu
  apiGroup: \"\"
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: \"\"


root@ip-172-31-40-54:~# echo "kind: ClusterRoleBinding
> apiVersion: rbac.authorization.k8s.io/v1beta1
> metadata:
>   name: cluster-admin-shanu
> subjects:
> - kind: User
>   name: shanu
>   apiGroup: \"\"
> roleRef:
>   kind: ClusterRole
>   name: cluster-admin
>   apiGroup: \"\"" | kubectl create -f -
clusterrolebinding.rbac.authorization.k8s.io/cluster-admin-shanu created



root@ip-172-31-40-54:~# kubectl describe clusterrolebindings.rbac.authorization.k8s.io cluster-admin
Name:         cluster-admin
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
Role:
  Kind:  ClusterRole
  Name:  cluster-admin
Subjects:
  Kind   Name            Namespace
  ----   ----            ---------
  Group  system:masters


root@ip-172-31-40-54:~# kubectl get ns --context=shanu-context
NAME              STATUS   AGE
default           Active   60m
dev               Active   47m
kube-node-lease   Active   60m
kube-public       Active   60m
kube-system       Active   60m
prod              Active   11m
root@ip-172-31-40-54:~# kubectl get ns --context=shanu-context^C
root@ip-172-31-40-54:~# kubectl create ns dev1 --context=shanu-context
namespace/dev1 created
root@ip-172-31-40-54:~#



Confgmaps  & secretes

Configmaps ==>> 
1. Keep the file in Dockerimage by using dockerfile.(Hardcode)
2.Using Env Variable




apiVersion: v1
kind: Pod
metadata:
  name: envar-demo
  labels:
    purpose: demonstrate-envars
spec:
  containers:
  - name: envar-demo-container
    image: sreeharshav/rollingupdate:v1
    env:
      - name: SERVER_IP
        value: "8.8.8.8"
      - name: PASSWORD
        value: "My-secret-password"



root@ip-172-31-40-54:~# echo "apiVersion: v1
> kind: Pod
> metadata:
>   name: envar-demo
>   labels:
>     purpose: demonstrate-envars
> spec:
>   containers:
>   - name: envar-demo-container
>     image: sreeharshav/rollingupdate:v1
>     env:
>       - name: SERVER_IP
>         value: "8.8.8.8"
>       - name: PASSWORD
>         value: "My-secret-password"" | kubectl create -f -
pod/envar-demo created



root@ip-172-31-40-54:~# kubectl exec -it envar-demo -- env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=envar-demo
TERM=xterm
SERVER_IP=8.8.8.8
PASSWORD=My-secret-password
KUBERNETES_SERVICE_HOST=100.64.0.1
KUBERNETES_SERVICE_PORT=443
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT=tcp://100.64.0.1:443
KUBERNETES_PORT_443_TCP=tcp://100.64.0.1:443
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_ADDR=100.64.0.1
NGINX_VERSION=1.15.8-1~stretch
NJS_VERSION=1.15.8.0.2.7-1~stretch
HOME=/root



apiVersion: v1
kind: Pod
metadata:
  name: pod1
  labels:
    purpose: testing
spec:
  containers:
  - name: envar-demo-container
    image: nginx:latest
    env:
      - name: SERVER_IP
        value: "8.8.8.8"
      - name: PASSWORD
        value: "My-secret-password"


root@ip-172-31-40-54:~# echo "apiVersion: v1
> kind: Pod
> metadata:
>   name: pod1
>   labels:
>     purpose: testing
> spec:
>   containers:
>   - name: envar-demo-container
>     image: nginx:latest
>     env:
>       - name: SERVER_IP
>         value: "8.8.8.8"
>       - name: PASSWORD
>         value: "My-secret-password"" | kubectl create -f -
pod/pod1 created
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# kubectl expose pod pod1 --port=8000 --target-port=80 --type=NodePort
service/pod1 exposed


root@ip-172-31-40-54:~# kubectl exec -it pod1 -- service nginx status
[ ok ] nginx is running.



git clone https://github.com/mavrick202/dockertest1.git


root@ip-172-31-40-54:~# cd dockertest1/
root@ip-172-31-40-54:~/dockertest1# ls
Dockerfile  Jenkinsfile  RemoveExistingFiles.sh  appspec.yml  index.html  k8sdeploy.yml  scorekeeper.js  style.css  testfile1
root@ip-172-31-40-54:~/dockertest1# rm -rf appspec.yml Dockerfile Jenkinsfile RemoveExistingFiles.sh testfile1
root@ip-172-31-40-54:~/dockertest1# ls
index.html  k8sdeploy.yml  scorekeeper.js  style.css
root@ip-172-31-40-54:~/dockertest1#


=====NGINX-WITHOUT-VOLUMES-CONFIGMAPS=================
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: newnginx
  name: newnginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newnginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: newnginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
          - containerPort: 80





root@ip-172-31-40-54:~/dockertest1# echo "apiVersion: apps/v1
> kind: Deployment
> metadata:
>   creationTimestamp: null
>   labels:
>     app: newnginx
>   name: newnginx
> spec:
>   replicas: 1
>   selector:
>     matchLabels:
>       app: newnginx
>   strategy: {}
>   template:
>     metadata:
>       creationTimestamp: null
>       labels:
>         app: newnginx
>     spec:
>       containers:
>       - image: nginx:latest
>         name: nginx
>         ports:
>           - containerPort: 80" | kubectl create -f -
deployment.apps/newnginx created


root@ip-172-31-40-54:~/dockertest1# kubectl get pods
NAME                        READY   STATUS    RESTARTS   AGE
newnginx-64c7ccb76c-ps4fw   1/1     Running   0          21s
root@ip-172-31-40-54:~/dockertest1# kubectl get deploy
NAME       READY   UP-TO-DATE   AVAILABLE   AGE
newnginx   1/1     1            1           28s
root@ip-172-31-40-54:~/dockertest1# kubectl expose deployment newnginx --port=8000 --target-port=80 --type=NodePort
service/newnginx exposed


root@ip-172-31-40-54:~/dockertest1# kubectl get pods
NAME                        READY   STATUS    RESTARTS   AGE
newnginx-64c7ccb76c-ps4fw   1/1     Running   0          3m11s
root@ip-172-31-40-54:~/dockertest1# kubectl exec -it newnginx-64c7ccb76c-ps4fw -- cat /usr/share/nginx/html/index.html
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
root@ip-172-31-40-54:~/dockertest1# cd ..
root@ip-172-31-40-54:~# ^C
root@ip-172-31-40-54:~# ls
aws  awscliv2.zip  dockertest1  shanu  snap
root@ip-172-31-40-54:~# vi index.html
root@ip-172-31-40-54:~#




root@ip-172-31-40-54:~# kubectl create configmap htmldefault --from-file=index.html
configmap/htmldefault created


root@ip-172-31-40-54:~# kubectl create configmap htmldefault --from-file=index.html
configmap/htmldefault created
root@ip-172-31-40-54:~# ^C
root@ip-172-31-40-54:~# kubectl get cm
NAME          DATA   AGE
htmldefault   1      11m




apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: newnginx
  name: newnginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newnginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: newnginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
          - containerPort: 80
        volumeMounts:
          - mountPath: /usr/share/nginx/html/
            name: nginx-conf
      volumes:
        - name: nginx-conf
          configMap:
            name: htmldefault


delete all
root@ip-172-31-40-54:~# kubectl get all
NAME                            READY   STATUS    RESTARTS   AGE
pod/newnginx-64c7ccb76c-ps4fw   1/1     Running   0          26m

NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
service/kubernetes   ClusterIP   100.64.0.1       <none>        443/TCP          79m
service/newnginx     NodePort    100.69.197.145   <none>        8000:30606/TCP   25m

NAME                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/newnginx   1/1     1            1           26m

NAME                                  DESIRED   CURRENT   READY   AGE
replicaset.apps/newnginx-64c7ccb76c   1         1         1       26m
root@ip-172-31-40-54:~# kubectl delete deployment.apps/newnginx
deployment.apps "newnginx" deleted
root@ip-172-31-40-54:~# kubectl get all
NAME                            READY   STATUS        RESTARTS   AGE
pod/newnginx-64c7ccb76c-ps4fw   0/1     Terminating   0          27m

NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
service/kubernetes   ClusterIP   100.64.0.1       <none>        443/TCP          79m
service/newnginx     NodePort    100.69.197.145   <none>        8000:30606/TCP   25m
root@ip-172-31-40-54:~# kubectl delete service/newnginx
service "newnginx" deleted




root@ip-172-31-40-54:~# echo "
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: newnginx
  name: newnginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newnginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: newnginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
          - containerPort: 80
        volumeMounts:
          - mountPath: /usr/share/nginx/html/
            name: nginx-conf
      volumes:
        - name: nginx-conf
          configMap:
            name: htmldefault" | kubectl create -f -
deployment.apps/newnginx created


output in internet!!!

Welcome to world!
If you see this page, the nginx web server is successfully installed and working. Further configuration is required.

For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.

Thank you for using nginx.



i did some changes in index.html


root@ip-172-31-40-54:~# kubectl create configmap html1 --from-file=index.html
configmap/html1 created
root@ip-172-31-40-54:~# kubectl get cm
NAME          DATA   AGE
html1         1      8s
htmldefault   1      16m


deploy newinginx i change configmap
root@ip-172-31-40-54:~# kubectl edit deploy newnginx
deployment.apps/newnginx edited
root@ip-172-31-40-54:~# kubectl get pods
NAME                        READY   STATUS        RESTARTS   AGE
newnginx-66c69db8cd-krjks   0/1     Terminating   0          6m8s
newnginx-789fc68fc6-vt87d   1/1     Running       0          7s
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# kubectl delete deploy newnginx
deployment.apps "newnginx" deleted
root@ip-172-31-40-54:~# kubectl get cm
NAME          DATA   AGE
html1         1      5m31s
htmldefault   1      21m
root@ip-172-31-40-54:~# kubectl delete cm html1 htmldefault
configmap "html1" deleted
configmap "htmldefault" deleted
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# ls
aws  awscliv2.zip  dockertest1  index.html  shanu  snap
root@ip-172-31-40-54:~# cd dockertest1/
root@ip-172-31-40-54:~/dockertest1# ls
index.html  k8sdeploy.yml  scorekeeper.js  style.css
root@ip-172-31-40-54:~/dockertest1#


apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: newnginx
  name: newnginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newnginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: newnginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
          - containerPort: 80
        volumeMounts:
          - mountPath: /usr/share/nginx/html/
            name: nginx-conf
      volumes:
        - name: nginx-conf
          configMap:
            name: html1


root@ip-172-31-40-54:~/dockertest1# kubectl get cm
NAME    DATA   AGE
html1   1      13s
root@ip-172-31-40-54:~/dockertest1# echo "
> apiVersion: apps/v1
> kind: Deployment
> metadata:
>   creationTimestamp: null
>   labels:
>     app: newnginx
>   name: newnginx
> spec:
>   replicas: 1
>   selector:
>     matchLabels:
>       app: newnginx
>   strategy: {}
>   template:
>     metadata:
>       creationTimestamp: null
>       labels:
>         app: newnginx
>     spec:
>       containers:
>       - image: nginx:latest
>         name: nginx
>         ports:
>           - containerPort: 80
>         volumeMounts:
>           - mountPath: /usr/share/nginx/html/
>             name: nginx-conf
>       volumes:
>         - name: nginx-conf
>           configMap:
>             name: html1" | kubectl create -f -
deployment.apps/newnginx created
root@ip-172-31-40-54:~/dockertest1#



root@ip-172-31-40-54:~/dockertest1# ls
index.html  k8sdeploy.yml  scorekeeper.js  style.css
root@ip-172-31-40-54:~/dockertest1# kubectl create configmap js1 --from-file=scorekeeper.js
configmap/js1 created
root@ip-172-31-40-54:~/dockertest1# kubectl create configmap css1 --from-file=style.css
configmap/css1 created
root@ip-172-31-40-54:~/dockertest1# kubectl get cm
NAME    DATA   AGE
css1    1      10s
html1   1      6m31s
js1     1      33s



apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: newnginx
  name: newnginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newnginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: newnginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
          - containerPort: 80
        volumeMounts:
          - mountPath: /usr/share/nginx/html/
            name: nginx-conf1
          - mountPath: /usr/share/nginx/html/
            name: nginx-conf2
          - mountPath: /usr/share/nginx/html/
            name: nginx-conf3    
      volumes:
        - name: nginx-conf1
          configMap:
            name: html1
        - name: nginx-conf2
          configMap:
            name: js1
        - name: nginx-conf3
          configMap:
            name: css1


IF WE ALL THIS WE GET ERROR BECASE ALREDY THEY MOUNT HTML1
now i mount multi file to single pod


apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: newnginx
  name: newnginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newnginx
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: newnginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
          - containerPort: 80
        volumeMounts:
          - mountPath: /usr/share/nginx/html/index.html
            name: nginx-conf1
            subPath: index.html
          - mountPath: /usr/share/nginx/html/scorekeeper.js
            name: nginx-conf2
            subPath: scorekeeper.js
          - mountPath: /usr/share/nginx/html/style.css
            name: nginx-conf3
            subPath: style.css    
      volumes:
        - name: nginx-conf1
          configMap:
            name: html1
        - name: nginx-conf2
          configMap:
            name: js1
        - name: nginx-conf3
          configMap:
            name: css1    
    


root@ip-172-31-40-54:~/dockertest1# kubectl create configmap testconfig1 --from-literal=sleep-interval=25 --from-literal=owner=sree --from-literal=env=prod --dry-run -o yaml
W0925 10:31:07.196394    2771 helpers.go:555] --dry-run is deprecated and can be replaced with --dry-run=client.
apiVersion: v1
data:
  env: prod
  owner: sree
  sleep-interval: "25"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: testconfig1



root@ip-172-31-40-54:~/dockertest1# kubectl create configmap testconfig1 --from-literal=sleep-interval=25 --from-literal=owner=sree --from-literal=env=prod
configmap/testconfig1 created


root@ip-172-31-40-54:~/dockertest1# kubectl get cm
NAME          DATA   AGE
css1          1      37m
html1         1      43m
js1           1      37m
testconfig1   3      76s
root@ip-172-31-40-54:~/dockertest1# kubectl describe cm testconfig1
Name:         testconfig1
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
env:
----
prod
owner:
----
sree
sleep-interval:
----
25

BinaryData
====

Events:  <none>



1:20 mins stop video
