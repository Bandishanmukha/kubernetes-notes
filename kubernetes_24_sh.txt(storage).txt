RAW Disk Mapping:

Direct Mapping

EBS RAW data attached to pod
two type peoples are there cluster adiminstartion and developer


Static Provision   ==>  PV & PVC
Dynamic Provisioining  ==> PVC

RWO
RWM
RO


apiVersion: v1
kind: Pod
metadata:
  name: test-ebs
  labels: 
     name: raw-volume-testing
spec:
  containers:
  - image: nginx:latest
    name: test-container
    volumeMounts:
    - mountPath: /usr/share/nginx/html/
      name: test-volume
  volumes:
  - name: test-volume
    # This AWS EBS volume must already exist.
    awsElasticBlockStore:
      volumeID: vol-0ebd0bffa7bb21cb8
      fsType: ext4

root@ip-172-31-40-54:~# echo 'apiVersion: v1
> kind: Pod
> metadata:
>   name: test-ebs
>   labels:
>      name: raw-volume-testing
> spec:
>   containers:
>   - image: nginx:latest
>     name: test-container
>     volumeMounts:
>     - mountPath: /usr/share/nginx/html/
>       name: test-volume
>   volumes:
>   - name: test-volume
>     # This AWS EBS volume must already exist.
>     awsElasticBlockStore:
>       volumeID: vol-0ebd0bffa7bb21cb8
>       fsType: ext4' | kubectl create -f -
pod/test-ebs created
root@ip-172-31-40-54:~# kubectl get pods
NAME       READY   STATUS              RESTARTS   AGE
test-ebs   0/1     ContainerCreating   0          6s
root@ip-172-31-40-54:~# kubectl describe pod test-ebs


apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
      name: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        name: mongodb
    spec:
      containers:
      - image: mongo
        name: mongodb
        imagePullPolicy: Always
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
      volumes:
      - name: mongodb-data
        awsElasticBlockStore:
           volumeID: vol-0ebd0bffa7bb21cb8
           fsType: ext4


root@ip-172-31-40-54:~# echo '
> apiVersion: apps/v1
> kind: Deployment
> metadata:
>   name: nginx-deployment
>   labels:
>     app: mongodb
> spec:
>   replicas: 1
>   selector:
>     matchLabels:
>       app: mongodb
>       name: mongodb
>   template:
>     metadata:
>       labels:
>         app: mongodb
>         name: mongodb
>     spec:
>       containers:
>       - image: mongo
>         name: mongodb
>         imagePullPolicy: Always
>         volumeMounts:
>         - name: mongodb-data
>           mountPath: /data/db
>       volumes:
>       - name: mongodb-data
>         awsElasticBlockStore:
>            volumeID: vol-0ebd0bffa7bb21cb8
>            fsType: ext4' | kubectl create -f -
deployment.apps/nginx-deployment created


root@ip-172-31-40-54:~# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   1/1     1            1           65s
root@ip-172-31-40-54:~# kubectl edit deploy nginx-deployment


repica size can increased

root@ip-172-31-40-54:~# kubectl get pods
NAME                                READY   STATUS              RESTARTS   AGE
nginx-deployment-684b659499-dn7jc   0/1     ContainerCreating   0          3s
nginx-deployment-684b659499-lbgrd   1/1     Running             0          3m18s
nginx-deployment-684b659499-ptntp   0/1     Pending             0          3s
root@ip-172-31-40-54:~#


Events:
  Type     Reason            Age                From               Message
  ----     ------            ----               ----               -------
  Warning  FailedScheduling  49s (x2 over 49s)  default-scheduler  0/3 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn't tolerate, 2 node(s) had no available disk.
root@ip-172-31-40

root@ip-172-31-40-54:~# kubectl get storageclasses.storage.k8s.io
NAME                      PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
default                   kubernetes.io/aws-ebs   Delete          Immediate              false                  103m
gp2                       kubernetes.io/aws-ebs   Delete          Immediate              false                  103m
kops-ssd-1-17 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   true                   103m
root@ip-

stop video 27:00

apiVersion: v1
kind: PersistentVolume
metadata:
  name: aws-pv1
  labels:
    type: aws-pv1
spec:
  storageClassName: gp2
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 2Gi
  accessModes:
  - ReadWriteOnce
  awsElasticBlockStore:
    volumeID: vol-011a43af7f7c30a69
    fsType: ext4


root@ip-172-31-40-54:~# kubectl get pv
No resources found
root@ip-172-31-40-54:~# echo "
> apiVersion: v1
> kind: PersistentVolume
> metadata:
>   name: aws-pv1
>   labels:
>     type: aws-pv1
> spec:
>   storageClassName: gp2
>   persistentVolumeReclaimPolicy: Retain
>   capacity:
>     storage: 2Gi
>   accessModes:
>   - ReadWriteOnce
>   awsElasticBlockStore:
>     volumeID: vol-011a43af7f7c30a69
>     fsType: ext4" | kubectl create -f -
persistentvolume/aws-pv1 created
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# kubectl get pv -A
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
aws-pv1   2Gi        RWO            Retain           Available           gp2                     65s
root@ip-172-31-40-54:~#



apiVersion: v1
kind: PersistentVolume
metadata:
  name: aws-pv2
  labels:
    type: aws-pv2
spec:
  storageClassName: gp2
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 2Gi
  accessModes:
  - ReadWriteOnce
  awsElasticBlockStore:
    volumeID: vol-011a43af7f7c30a69
    fsType: ext4


apiVersion: v1
kind: PersistentVolume
metadata:
  name: aws-pv3
  labels:
    type: aws-pv3
spec:
  storageClassName: gp2
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  awsElasticBlockStore:
    volumeID: vol-011a43af7f7c30a69
    fsType: ext4



root@ip-172-31-40-54:~# kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
aws-pv1   2Gi        RWO            Retain           Available           gp2                     6m19s
aws-pv2   2Gi        RWO            Retain           Available           gp2                     40s
aws-pv3   1Gi        RWO            Retain           Available           gp2                     4s
root@ip-172-31-40-54:~#


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim2
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi


root@ip-172-31-40-54:~# echo "apiVersion: v1
> kind: PersistentVolumeClaim
> metadata:
>   name: task-pv-claim1
> spec:
>   storageClassName: gp2
>   accessModes:
>     - ReadWriteOnce
>   resources:
>     requests:
>       storage: 2Gi" | kubectl create -f -
persistentvolumeclaim/task-pv-claim1 created
root@ip-172-31-40-54:~# kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                    STORAGECLASS   REASON   AGE
aws-pv1   2Gi        RWO            Retain           Available                            gp2                     10m
aws-pv2   2Gi        RWO            Retain           Bound       default/task-pv-claim1   gp2                     4m40s
aws-pv3   1Gi        RWO            Retain           Available                            gp2                     4m4s
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# echo "apiVersion: v1
> kind: PersistentVolumeClaim
> metadata:
>   name: task-pv-claim2
> spec:
>   storageClassName: gp2
>   accessModes:
>     - ReadWriteOnce
>   resources:
>     requests:
>       storage: 2Gi" | kubectl create -f -
persistentvolumeclaim/task-pv-claim2 created
root@ip-172-31-40-54:~# echo "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim3
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi" | kubectl create -f -
persistentvolumeclaim/task-pv-claim3 created
root@ip-172-31-40-54:~# kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS   REASON   AGE
aws-pv1   2Gi        RWO            Retain           Bound    default/task-pv-claim2   gp2                     12m
aws-pv2   2Gi        RWO            Retain           Bound    default/task-pv-claim1   gp2                     7m2s
aws-pv3   1Gi        RWO            Retain           Bound    default/task-pv-claim3   gp2                     6m26s
root@ip-172-31-40-54:~#


kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim4
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi" | kubectl create -f -
persistentvolumeclaim/task-pv-claim4 created
root@ip-172-31-40-54:~# kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS   REASON   AGE
aws-pv1   2Gi        RWO            Retain           Bound    default/task-pv-claim2   gp2                     14m
aws-pv2   2Gi        RWO            Retain           Bound    default/task-pv-claim1   gp2                     9m17s
aws-pv3   1Gi        RWO            Retain           Bound    default/task-pv-claim3   gp2                     8m41s
root@ip-172-31-40-54:~# kubectl get pvc
NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
task-pv-claim1   Bound    aws-pv2                                    2Gi        RWO            gp2            4m49s
task-pv-claim2   Bound    aws-pv1                                    2Gi        RWO            gp2            2m44s
task-pv-claim3   Bound    aws-pv3                                    1Gi        RWO            gp2            2m22s
task-pv-claim4   Bound    pvc-4186fd2e-fb79-4c8f-9346-6a68500884e6   3Gi        RWO            gp2            9s


root@ip-172-31-40-54:~# kubectl get pvc
NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
task-pv-claim1   Bound    aws-pv2                                    2Gi        RWO            gp2            4m49s
task-pv-claim2   Bound    aws-pv1                                    2Gi        RWO            gp2            2m44s
task-pv-claim3   Bound    aws-pv3                                    1Gi        RWO            gp2            2m22s
task-pv-claim4   Bound    pvc-4186fd2e-fb79-4c8f-9346-6a68500884e6   3Gi        RWO            gp2            9s
root@ip-172-31-40-54:~# ^C
root@ip-172-31-40-54:~# kubectl delete pvc task-pv-claim1 task-pv-claim2 task-pv-claim3 task-pv-claim4
persistentvolumeclaim "task-pv-claim1" deleted
persistentvolumeclaim "task-pv-claim2" deleted
persistentvolumeclaim "task-pv-claim3" deleted
persistentvolumeclaim "task-pv-claim4" deleted
root@ip-172-31-40-54:~# kubectl get pvc
No resources found in default namespace.
root@ip-172-31-40-54:~# kubectl get pv
NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                    STORAGECLASS   REASON   AGE
aws-pv1   2Gi        RWO            Retain           Released   default/task-pv-claim2   gp2                     17m
aws-pv2   2Gi        RWO            Retain           Released   default/task-pv-claim1   gp2                     11m
aws-pv3   1Gi        RWO            Retain           Released   default/task-pv-claim3   gp2                     10m
root@ip-172-31-40-54:~#

Create PV
1. Volume ID
2. Size
3. StorageClass

High  - I01

Med  -  GP2--  Dev

Low   - ST1  -- Testing




apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: high
provisioner: kubernetes.io/aws-ebs
parameters:
  type: io1 
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: Immediate

root@ip-172-31-40-54:~# kubectl get storageclasses
NAME                      PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
default                   kubernetes.io/aws-ebs   Delete          Immediate              false                  52m
gp2                       kubernetes.io/aws-ebs   Delete          Immediate              false                  52m
high                      kubernetes.io/aws-ebs   Retain          Immediate              true                   20s
kops-ssd-1-17 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   true                   52m
root@ip-172-31-40-54:~#

apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: medium
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2 
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: Immediate


apiVersion: storage.k8s.io/v1beta1
kind: StorageClass
metadata:
  name: low
provisioner: kubernetes.io/aws-ebs
parameters:
  type: st1 
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: Immediate


root@ip-172-31-40-54:~# kubectl get storageclasses
NAME                      PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
default                   kubernetes.io/aws-ebs   Delete          Immediate              false                  55m
gp2                       kubernetes.io/aws-ebs   Delete          Immediate              false                  55m
high                      kubernetes.io/aws-ebs   Retain          Immediate              true                   3m52s
kops-ssd-1-17 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   true                   55m
low                       kubernetes.io/aws-ebs   Retain          Immediate              true                   5s
medium                    kubernetes.io/aws-ebs   Retain          Immediate              true                   57s
root@ip-172-31-40-54:~#

apiVersion: v1
kind: PersistentVolume
metadata:
  name: aws-pv3
  labels:
    type: aws-pv3
spec:
  storageClassName: gp2
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  awsElasticBlockStore:
    volumeID: vol-011a43af7f7c30a69
    fsType: ext4

----------------------------------------------------------------------------------------



apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim1
spec:
  storageClassName: high
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi


apiversion: v1
kind: Pod
metadata:
  name: task-pv-pod
spec:
  volumes:
    - name: task-pv-storage
      PersistentVolumeClaim:
        claimName: task-pv-claim1
  containers:
  - name: task-pv-container
    image: nginx
    ports:
      - containerPort: 80
        name: "http-server"
    volumeMounts: 
      - mountPath: "/usr/share/nginx/html"
        name: task-pv-storage
        


stop video in 1:00