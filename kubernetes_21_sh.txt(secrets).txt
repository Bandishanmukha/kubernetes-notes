kubernetes secrets

---

root@ip-172-31-40-54:~# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-5vx5r   kubernetes.io/service-account-token   3      4m47s

password can encrypted in base 64

root@ip-172-31-40-54:~# echo "shanu@123" | base64
c2hhbnVAMTIzCg==


root@ip-172-31-40-54:~# echo -n "shanu@123" | base64
c2hhbnVAMTIz


root@ip-172-31-40-54:~# kubectl api-versions


root@ip-172-31-40-54:~# kubectl api-resources | grep -i sec
secrets                                        v1                                true         Secret
podsecuritypolicies               psp          policy/v1beta1                    false        PodSecurityPolicy
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# kubectl api-resources | grep -i v1


root@ip-172-31-40-54:~# echo "c2hhbnVAMTIzCg==" | base64 --decode
shanu@123



apiVersion: v1
kind: Secret
metadata:
  name: mysql-mysecret
type: Opaque
data:
  ROOT_PASSWORD: c2hhbnVAMTQzCg==
  XOOT_PASSWORD: c2hhbnVAMTQzCg==
  MOOT_PASSWORD: c2hhbnVAMTQzCg==
   



root@ip-172-31-40-54:~# echo "apiVersion: v1
> kind: Secret
> metadata:
>   name: mysecret
> type: Opaque
> data:
>   ROOT_PASSWORD: SW5kaWFAMTIzNDU2Cg==
>   XOOT_PASSWORD: SW5kaWFAMTIzNDU2Cg==
>   MOOT_PASSWORD: SW5kaWFAMTIzNDU2Cg==
> " | kubectl create -f -
secret/mysecret created


root@ip-172-31-40-54:~# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-5vx5r   kubernetes.io/service-account-token   3      36m
mysecret              Opaque                                3      27s
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# kubectl get secrets -o json


root@ip-172-31-40-54:~# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-5vx5r   kubernetes.io/service-account-token   3      37m
mysecret              Opaque                                3      103s
root@ip-172-31-40-54:~#


root@ip-172-31-40-54:~# kubectl get secrets mysecret -o yaml
apiVersion: v1
data:
  MOOT_PASSWORD: SW5kaWFAMTIzNDU2Cg==
  ROOT_PASSWORD: SW5kaWFAMTIzNDU2Cg==
  XOOT_PASSWORD: SW5kaWFAMTIzNDU2Cg==
kind: Secret
metadata:
  creationTimestamp: "2021-09-27T13:48:15Z"
  name: mysecret
  namespace: default
  resourceVersion: "6610"
  selfLink: /api/v1/namespaces/default/secrets/mysecret
  uid: c8645f84-18ed-4c06-baa1-b402befe6580
type: Opaque
root@ip-172-31-40-54:~#



root@ip-172-31-40-54:~# kubectl get secrets mysecret -o json | jq 'keys'
[
  "apiVersion",
  "data",
  "kind",
  "metadata",
  "type"
]



root@ip-172-31-40-54:~# kubectl get secrets mysecret -o json | jq '.data."MOOT_PASSWORD"'
"SW5kaWFAMTIzNDU2Cg=="


root@ip-172-31-40-54:~# kubectl get secrets mysecret -o json | jq
{
  "apiVersion": "v1",
  "data": {
    "MOOT_PASSWORD": "SW5kaWFAMTIzNDU2Cg==",
    "ROOT_PASSWORD": "SW5kaWFAMTIzNDU2Cg==",
    "XOOT_PASSWORD": "SW5kaWFAMTIzNDU2Cg=="
  },
  "kind": "Secret",
  "metadata": {
    "creationTimestamp": "2021-09-27T13:48:15Z",
    "name": "mysecret",
    "namespace": "default",
    "resourceVersion": "6610",
    "selfLink": "/api/v1/namespaces/default/secrets/mysecret",
    "uid": "c8645f84-18ed-4c06-baa1-b402befe6580"
  },
  "type": "Opaque"
}


apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          # volumeMounts:
          #   - mountPath: "/var/lib/mysql"
          #     subPath: "mysql"
          #     name: mysql-data
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysecret
                  key: ROOT_PASSWORD
      # volumes:
      #   - name: mysql-data
      #     persistentVolumeClaim:
      #       claimName: mysql-data-disk


https://www.serverlab.ca/tutorials/containers/kubernetes/how-to-deploy-mysql-server-5-7-to-kubernetes/       
    
root@ip-172-31-40-54:~# echo "apiVersion: apps/v1
> kind: Deployment
> metadata:
>   name: mysql-deployment
>   labels:
>     app: mysql
> spec:
>   replicas: 1
>   selector:
>     matchLabels:
>       app: mysql
>   template:
>     metadata:
>       labels:
>         app: mysql
>     spec:
>       containers:
>         - name: mysql
>           image: mysql:5.7
>           ports:
>             - containerPort: 3306
>           # volumeMounts:
>           #   - mountPath: "/var/lib/mysql"
>           #     subPath: "mysql"
>           #     name: mysql-data
>           env:
>             - name: MYSQL_ROOT_PASSWORD
>               valueFrom:
>                 secretKeyRef:
>                   name: mysecret
>                   key: ROOT_PASSWORD
>       # volumes:
>       #   - name: mysql-data
>       #     persistentVolumeClaim:
>       #       claimName: mysql-data-disk" | kubectl create -f -
deployment.apps/mysql-deployment created
root@ip-172-31-40-54:~#kubectl expose mysql-deployment --port=8111 --target-port=3306 --type=NodePort
kubectl get svc



check in mysql workbench   used pod portlike 30729 



root@ip-172-31-40-54:~# kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
mysql-deployment-d7c54944d-4gch8   1/1     Running   0          4s
mysql-deployment-d7c54944d-cxthf   1/1     Running   0          4s
mysql-deployment-d7c54944d-rtj8g   1/1     Running   0          5s




root@ip-172-31-40-54:~# kubectl get pods
NAME                               READY   STATUS             RESTARTS   AGE
mysql-deployment-f969f6d5f-6f6gh   0/1     CrashLoopBackOff   5          4m56s
mysql-deployment-f969f6d5f-cf9z6   0/1     CrashLoopBackOff   5          4m56s
mysql-deployment-f969f6d5f-czvbw   0/1     CrashLoopBackOff   5          4m56s
root@ip-172-31-40-54:~# kubectl logs mysql-deployment-f969f6d5f-6f6gh


root@ip-172-31-40-54:~# kubectl get deploy
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
mysql-deployment   0/3     3            0           9m1s
root@ip-172-31-40-54:~# kubectl delete deploy mysql-deployment
deployment.apps "mysql-deployment" deleted



apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: "/var/lib/mysql"
              subPath: "mysql"
              name: mysql-data
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-mysecret
                  key: ROOT_PASSWORD
      volumes:
        - name: mysql-data
          emptyDir: {}

root@ip-172-31-40-54:~# echo "apiVersion: apps/v1
> kind: Deployment
> metadata:
>   name: mysql-deployment
>   labels:
>     app: mysql
> spec:
>   replicas: 3
>   selector:
>     matchLabels:
>       app: mysql
          ports:
            - containerPort: 3306
>   template:
>     metadata:
>       labels:
>         app: mysql
>     spec:
>       containers:
>         - name: mysql
>           image: mysql:5.7
>           ports:
>             - containerPort: 3306
>           volumeMounts:
>             - mountPath: "/var/lib/mysql"
>               subPath: "mysql"
>               name: mysql-data
>           env:
>             - name: MYSQL_ROOT_PASSWORD
>               valueFrom:
>                 secretKeyRef:
>                   name: mysql-mysecret
>                   key: ROOT_PASSWORD
>       volumes:
>         - name: mysql-data
>           emptyDir: {}" | kubectl create -f -
deployment.apps/mysql-deployment created


root@ip-172-31-40-54:~# kubectl expose deployment mysql-deployment --port=3306 --target-port=3306 --type=NodePort
service/mysql-deployment exposed
root@ip-172-31-40-54:~#



root@ip-172-31-40-54:~# kubectl exec -it mysql-deployment-7d47464696-pn6ck -- env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=mysql-deployment-7d47464696-pn6ck
TERM=xterm
MYSQL_ROOT_PASSWORD=shanu@143

KUBERNETES_PORT_443_TCP_ADDR=100.64.0.1
KUBERNETES_SERVICE_HOST=100.64.0.1
KUBERNETES_SERVICE_PORT=443
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT=tcp://100.64.0.1:443
KUBERNETES_PORT_443_TCP=tcp://100.64.0.1:443
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP_PORT=443
GOSU_VERSION=1.12
MYSQL_MAJOR=5.7
MYSQL_VERSION=5.7.35-1debian10
HOME=/root
root@ip-172-31-40-54:~#


----------------------------------------------------
Secreate In file


apiVersion: v1
data:
  password.file: |
     SW5kaWFAMTIzNDU2Cg==
kind: Secret
type: Opaque
metadata:
  name: secret1

=====MOUNT-SECRET-AS-VOLUME====
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: secret1


root@ip-172-31-40-54:~# echo "apiVersion: v1
> data:
>   password.file: |
>      SW5kaWFAMTIzNDU2Cg==
> kind: Secret
> type: Opaque
> metadata:
>   name: secret1" | kubectl create -f -
secret/secret1 created



i create config map also


root@ip-172-31-40-54:~# kubectl create configmap testconfig2 --from-literal=CostCenter=C8080
configmap/testconfig2 created


root@ip-172-31-40-54:~# kubectl get cm
NAME          DATA   AGE
testconfig2   1      20s
root@ip-172-31-40-54:~# kubectl describe  cm testconfig2
Name:         testconfig2
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
CostCenter:
----
C8080

BinaryData
====

Events:  <none>




apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: configmap-vol
      mountPath: "/tmp/configmap-vol"
    - name: secret-vol
      mountPath: "/tmp/secret-vol"
      readOnly: true
  volumes:
  - name: configmap-vol
    configMap:
      name: testconfig2
  - name: secret-vol    
    secret:
      secretName: secret1  



root@ip-172-31-40-54:~# echo "apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: redis
    volumeMounts:
    - name: configmap-vol
      mountPath: "/tmp/configmap-vol"
    - name: secret-vol
      mountPath: "/tmp/secret-vol"
      readOnly: true
  volumes:
  - name: configmap-vol
    configMap:
      name: testconfig2
  - name: secret-vol
    secret:
      secretName: secret1" | kubectl create -f -
pod/mypod created


root@ip-172-31-40-54:~# kubectl get pods
NAME                                READY   STATUS    RESTARTS   AGE
mypod                               1/1     Running   0          15s
mysql-deployment-7d47464696-pn6ck   1/1     Running   1          33m
mysql-deployment-7d47464696-s79gn   1/1     Running   1          33m
mysql-deployment-7d47464696-vncfg   1/1     Running   1          33m
root@ip-172-31-40-54:~# kubectl exec -it mypod -- ls /tmp
configmap-vol  secret-vol


root@ip-172-31-40-54:~# kubectl exec -it mypod -- ls /tmp/configmap-vol
CostCenter

root@ip-172-31-40-54:~# kubectl exec -it mypod -- cat /tmp/configmap-vol/CostCenter
C8080root@ip-172-31-40-54:~#


C8080root@ip-172-31-40-54:~# kubectl exec -it mypod -- cat /tmp/secret-vol/password.file
India@123456


kubernetes secrets can be given to pods as
 ENV
 

root@ip-172-31-40-54:~# kubectl get pod -o wide
NAME                                READY   STATUS    RESTARTS   AGE     IP            NODE                                           NOMINATED NODE   READINESS GATES
mypod                               1/1     Running   0          6m23s   100.96.2.9    ip-172-20-34-67.ap-south-1.compute.internal    <none>           <none>
mysql-deployment-7d47464696-pn6ck   1/1     Running   1          39m     100.96.1.12   ip-172-20-34-187.ap-south-1.compute.internal   <none>           <none>
mysql-deployment-7d47464696-s79gn   1/1     Running   1          39m     100.96.1.13   ip-172-20-34-187.ap-south-1.compute.internal   <none>           <none>
mysql-deployment-7d47464696-vncfg   1/1     Running   1          39m     100.96.2.8    ip-172-20-34-67.ap-south-1.compute.internal    <none>           <none>
root@ip-172-31-40-54:~#



root@ip-172-31-40-54:~# ssh -i .ssh/id_rsa admin@13.232.139.198
The authenticity of host '13.232.139.198 (13.232.139.198)' can't be established.
ECDSA key fingerprint is SHA256:simuT4A/nCO+/8Dep/qQQT3figkuL8qUbtjvqjfh5Po.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '13.232.139.198' (ECDSA) to the list of known hosts.
admin@13.232.139.198: Permission denied (publickey).
root@ip-172-31-40-54:~# ssh -i .ssh/id_rsa ubuntu@13.232.139.198
Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.11.0-1017-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Mon Sep 27 16:42:34 UTC 2021

  System load:  0.03              Users logged in:          0
  Usage of /:   43.2% of 7.69GB   IPv4 address for cbr0:    100.96.2.1
  Memory usage: 18%               IPv4 address for docker0: 172.17.0.1
  Swap usage:   0%                IPv4 address for eth0:    172.20.34.67
  Processes:    139

15 updates can be applied immediately.
9 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable



The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

ubuntu@ip-172-20-34-67:~$ sudo -i
root@ip-172-20-34-67:~# docker ps
CONTAINER ID        IMAGE                                              COMMAND                  CREATED             STATUS              PORTS               NAMES
1aff931f40b5        redis                                              "docker-entrypoint.s…"   9 minutes ago       Up 9 minutes                            k8s_mypod_mypod_default_247e5980-934e-442f-a673-f734542b4dd5_0
fa350069a592        k8s.gcr.io/pause-amd64:3.2                         "/pause"                 9 minutes ago       Up 9 minutes                            k8s_POD_mypod_default_247e5980-934e-442f-a673-f734542b4dd5_0
bcd3b31ee517        1d7aba917169                                       "docker-entrypoint.s…"   41 minutes ago      Up 41 minutes                           k8s_mysql_mysql-deployment-7d47464696-vncfg_default_2c1d8026-2ec3-441e-8a57-c040e89f51bc_1
976e6c74f933        k8s.gcr.io/pause-amd64:3.2                         "/pause"                 41 minutes ago      Up 41 minutes                           k8s_POD_mysql-deployment-7d47464696-vncfg_default_2c1d8026-2ec3-441e-8a57-c040e89f51bc_0
89034963fab6        k8s.gcr.io/k8s-dns-sidecar-amd64                   "/sidecar --v=2 --lo…"   3 hours ago         Up 3 hours                              k8s_sidecar_kube-dns-75c54bf6d-hrbg5_kube-system_e0005e5e-ed8c-4686-a8b3-db9b47c44063_0
e610621f32f1        k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64             "/dnsmasq-nanny -v=2…"   3 hours ago         Up 3 hours                              k8s_dnsmasq_kube-dns-75c54bf6d-hrbg5_kube-system_e0005e5e-ed8c-4686-a8b3-db9b47c44063_0
96ec44c6f85e        k8s.gcr.io/k8s-dns-kube-dns-amd64                  "/kube-dns --config-…"   3 hours ago         Up 3 hours                              k8s_kubedns_kube-dns-75c54bf6d-hrbg5_kube-system_e0005e5e-ed8c-4686-a8b3-db9b47c44063_0
593227bf38ba        k8s.gcr.io/pause-amd64:3.2                         "/pause"                 3 hours ago         Up 3 hours                              k8s_POD_kube-dns-75c54bf6d-hrbg5_kube-system_e0005e5e-ed8c-4686-a8b3-db9b47c44063_0
fe134b43b4ef        k8s.gcr.io/cluster-proportional-autoscaler-amd64   "/cluster-proportion…"   3 hours ago         Up 3 hours                              k8s_autoscaler_kube-dns-autoscaler-7647db5967-plqbv_kube-system_846c8767-695a-46c4-82f1-f7702f795aad_0
4c4cc40fb3d8        k8s.gcr.io/pause-amd64:3.2                         "/pause"                 3 hours ago         Up 3 hours                              k8s_POD_kube-dns-autoscaler-7647db5967-plqbv_kube-system_846c8767-695a-46c4-82f1-f7702f795aad_0
65cc004867e3        k8s.gcr.io/kube-proxy                              "/usr/local/bin/kube…"   4 hours ago         Up 4 hours                              k8s_kube-proxy_kube-proxy-ip-172-20-34-67.ap-south-1.compute.internal_kube-system_f179c91c5a907174bff22a05fe8b6108_0
ead49dafd115        k8s.gcr.io/pause-amd64:3.2                         "/pause"                 4 hours ago         Up 4 hours                              k8s_POD_kube-proxy-ip-172-20-34-67.ap-south-1.compute.internal_kube-system_f179c91c5a907174bff22a05fe8b6108_0
root@ip-172-20-34-67:~#



root@ip-172-31-40-54:~# kubectl edit secret secret1
Edit cancelled, no changes made.

password change


root@ip-172-31-40-54:~# kubectl exec -it mypod -- cat /tmp/secret-vol/password.file
India@123456

password can visible like


secret pod liftime interaction

kubectl delete secreate secreat1

deploy that redis yaml file

deployment can file


1:08 stop video